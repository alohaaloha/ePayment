package travelsafe.paypal;

import com.paypal.api.payments.*;
import com.paypal.base.rest.PayPalRESTException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import travelsafe.repository.TravelInsuranceRepository;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Created by aloha on 23-Nov-16.
 */
@Service
public class PayPalService {

    @Autowired
    TravelInsuranceRepository travelInsuranceRepository;

    /**
     * When user clicks to buy a product on our website
     * @param orderId id of an object that represents item (basket, or in our case it is TravelInsurance)
     * @param orderCost how much user is charged
     * @param orderShippingCost cost of shipping
     * @param description description of payment
     * @return Link object - look for 'approval_url' - that is url where user should be redirected so he/she can
     *         confirm or cancel buying product - link is generated by PayPal
     * */
    public Payment createPayment(long orderId, double orderCost, double orderShippingCost, double totalCost, String description){

        // Set payment details
        Details details = new Details();
        details.setShipping(String.valueOf(orderShippingCost));
        details.setSubtotal(String.valueOf(orderCost));
        details.setTax("0");

        // Payment amount
        Amount amount = new Amount();
        amount.setCurrency("USD");
        // Total must be equal to sum of shipping, tax and subtotal.
        amount.setTotal(String.valueOf(totalCost));
        amount.setDetails(details);

        // Transaction information
        Transaction transaction = new Transaction();
        transaction.setAmount(amount);
        transaction.setDescription(description);

        //------------------------------------
        // Items TODO - home, car as items maybe
        /*
        Item item = new Item();
        item.setName("Ground Coffee 40 oz").setQuantity("1").setCurrency("USD").setPrice("5");
        ItemList itemList = new ItemList();
        List<Item> items = new ArrayList<Item>();
        items.add(item);
        itemList.setItems(items);

        transaction.setItemList(itemList);
        */
        //------------------------------------

        // Add transaction to a list
        List<Transaction> transactions = new ArrayList<>();
        transactions.add(transaction);

        // Add payer details
        Payer payer = new Payer();
        payer.setPaymentMethod("paypal");

        // Add payment details
        Payment payment = new Payment();
        payment.setIntent("sale");
        payment.setPayer(payer);
        payment.setTransactions(transactions);

        // Add redirect URLs
        RedirectUrls redirectUrls = new RedirectUrls();
        redirectUrls.setCancelUrl(PayPalConfig.CANCEL_URL+"/"+orderId);
        redirectUrls.setReturnUrl(PayPalConfig.RETURN_URL+"/"+orderId);
        payment.setRedirectUrls(redirectUrls);

        // Create payment
        System.out.println(">>> CREATING PAYMENT...");
        Payment createdPayment;
        try {
            createdPayment = payment.create(PayPalContext.context);
            System.out.println(">>> CREATING PAYMENT STATUS: SUCCESS!");
            System.out.println(createdPayment.toJSON());
            return createdPayment;
        } catch (PayPalRESTException e) {
            System.err.println(e.getDetails());
            System.out.println(">>> CREATING PAYMENT STATUS: ERROR");
        }

        return null;
    }


    /**
     * Get redirect url (from our app to paypal)
     * */
    public Links getLink(Payment payment){

        Iterator links = payment.getLinks().iterator();
        while (links.hasNext()) {
            Links link = (Links) links.next();
            if (link.getRel().equalsIgnoreCase("approval_url")) {
                // REDIRECT USER TO link.getHref()
                //System.out.println(link.toJSON());
                //https://github.com/paypal/PayPal-Java-SDK/blob/master/rest-api-sample/src/main/java/com/paypal/api/payments/servlet/PaymentWithPayPalServlet.java
                return link;
            }
        }
        return null;

    }



    /**
     * When user confirms payment
     * @param PayerID payer id generated by PayPal
     * @param paymentId payment id generated by PayPal
     * @return boolean status of executing payment
     * */
    public boolean executePayment(String PayerID, String paymentId){

        boolean retVal=false;

        /*
        req.getParameter("PayerID")
        req.getParameter("paymentId")
        */

        Payment payment = new Payment();
        payment.setId(paymentId);

        PaymentExecution paymentExecution = new PaymentExecution();
        paymentExecution.setPayerId(PayerID);

        System.out.println(">>> EXECUTING PAYMENT");
        try {
            Payment createdPayment = payment.execute(PayPalContext.context, paymentExecution);
            System.out.println(">>> STATUS: SUCCESS");
            System.out.println(createdPayment.toJSON());
            return true;

        } catch (PayPalRESTException e) {
            System.out.println(">>> STATUS: ERROR");
            System.err.println(e.getDetails());
        }

        return false;
    }

    public Payment getPayPalPaymentInfo(String paymentId){
        try {
            Payment payment = Payment.get(PayPalContext.context, paymentId);
            return payment;
        } catch (PayPalRESTException e) {
            e.printStackTrace();
            return null;
        }
    }


    public boolean checkOrderAndPaymentCombo(Long orderId, String paymentId){
        /*Payment payment = getPayPalPaymentInfo(paymentId);
        String urlFromPaymet = payment.getRedirectUrls().getReturnUrl();
        return urlFromPaymet.contains(orderId.toString());*/
        return travelInsuranceRepository.getOne(orderId).getPaypalPaymentId().equals(paymentId);
    }


}
